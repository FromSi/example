openapi: 3.0.3
info:
  title: Example
  version: 0.0.1
  description: My vision of an architectural backend using clean architecture and DDD
  contact:
    email: fromsi665@gmail.com
    name: FromSi
    url: https://fromsi.net
externalDocs:
  description: Find out more about OpenAPI 3.0.3
  url: https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md
servers:
  - url: localhost:8080
    description: make run
tags:
  - name: auth
    description: Authorization User
    externalDocs:
      url: https://github.com/FromSi/example/blob/master/internal/app/apiserver/presentation/controllers/auth.go
      description: Go Controllers
  - name: user
    description: User Profiles
    externalDocs:
      url: https://github.com/FromSi/example/blob/master/internal/app/apiserver/presentation/controllers/user.go
      description: Go Controllers
  - name: post
    description: User Posts To Provide Information
    externalDocs:
      url: https://github.com/FromSi/example/blob/master/internal/app/apiserver/presentation/controllers/post.go
      description: Go Controllers
paths:
  /auth/login:
    get:
      summary: Get Mnemonic For Login
      tags:
        - auth
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - mnemonic
                    properties:
                      mnemonic:
                        type: string
                        format: bip39_mnemonic
                        example: 'number orphan liquid radio tray stadium they dune female sheriff tourist talent'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: LogIn Or SignUp
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mnemonic:
                  type: string
                  format: bip39_mnemonic
                  example: 'number orphan liquid radio tray stadium they dune female sheriff tourist talent'
                refresh_token:
                  type: string
                  format: uuid
                  example: '09d0ce56-33ab-4fce-90bb-d2b4d6d844ba'
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - token_type
                      - access_token
                      - refresh_token
                      - access_token_expires_in
                      - refresh_token_expires_in
                    properties:
                      token_type:
                        type: string
                        format: string
                        example: bearer
                        enum:
                          - bearer
                      access_token:
                        type: string
                        format: jwt_hs256
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJleGFtcGxlIiwiYXVkIjoidXNlciIsInN1YiI6ImJjMXFmcG12N3kydnI2dGs1MHZ4bHlodHA2cGh6MHp0cnFtc2Fud2E2dCIsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE2MzAwMDAwfQ.GWtkHCOw1bl6PjwPdSDqwRDi_5bXz4w6tSHzkTVWkQ0'
                      refresh_token:
                        type: string
                        format: uuid
                        example: '09d0ce56-33ab-4fce-90bb-d2b4d6d844ba'
                      access_token_expires_in:
                        type: integer
                        format: unix
                        example: 1516300000
                      refresh_token_expires_in:
                        type: integer
                        format: unix
                        example: 1516300000
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/sessions:
    get:
      summary: Get User Sessions
      tags:
        - auth
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - id
                      - agent
                      - ip
                      - created_at
                      - updated_at
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: '09d0ce56-33ab-4fce-90bb-d2b4d6d844ba'
                      user_id:
                        type: string
                        format: bech32
                        example: 'bc1qfpmv7y2vr6tk50vxlyhtp6phz0ztrqmsanwa6t'
                      agent:
                        type: string
                        format: text
                        example: 'Mozilla/5.0 (X11; Linux x86_64; rv:121.0)'
                      ip:
                        type: string
                        format: text
                        example: '1.1.1.1'
                      expired_at:
                        type: string
                        format: date-time
                        example: 2024-07-16T21:31:26.335809566+05:00
                      created_at:
                        type: string
                        format: date-time
                        example: 2024-07-16T21:31:26.335809566+05:00
                      updated_at:
                        type: string
                        format: date-time
                        example: 2024-07-16T21:31:26.335809566+05:00
  /auth/revoke:
    post:
      summary: Revoke User Session
      tags:
        - auth
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                session_id:
                  type: string
                  format: uuid
                  example: '09d0ce56-33ab-4fce-90bb-d2b4d6d844ba'
                refresh_token:
                  type: string
                  format: uuid
                  example: '09d0ce56-33ab-4fce-90bb-d2b4d6d844ba'
      responses:
        '200':
          description: Successful
  /users/my:
    get:
      summary: Get The Profile Of The Current User
      tags:
        - user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - id
                    properties:
                      id:
                        type: string
                        format: bech32
                        example: 'bc1qfpmv7y2vr6tk50vxlyhtp6phz0ztrqmsanwa6t'
  /users/{id}:
    get:
      summary: Get The Profile Of The Current User
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: ID of user
          required: true
          schema:
            $ref: '#/components/schemas/Bech32Query'
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - id
                    properties:
                      id:
                        type: string
                        format: bech32
                        example: 'bc1qfpmv7y2vr6tk50vxlyhtp6phz0ztrqmsanwa6t'
  /posts:
    post:
      summary: Create New Post
      tags:
        - post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  format: text
                  example: Hello World!
      responses:
        '202':
          description: Successful
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get List Post
      tags:
        - post
      parameters:
        - name: page1
          in: query
          description: Page of pageable
          required: false
          schema:
            $ref: '#/components/schemas/PageQuery'
        - name: limit
          in: query
          description: Limit of pageable
          required: false
          schema:
            $ref: '#/components/schemas/LimitQuery'
        - name: sort[id]
          in: query
          description: Multy-Sort by fields
          required: false
          schema:
            $ref: '#/components/schemas/SortQuery'
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pageable
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required:
                        - id
                        - text
                        - created_at
                        - updated_at
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: '09d0ce56-33ab-4fce-90bb-d2b4d6d844ba'
                        text:
                          type: string
                          format: text
                          example: Hello World!
                        created_at:
                          type: string
                          format: date-time
                          example: 2024-07-16T21:31:26.335809566+05:00
                        updated_at:
                          type: string
                          format: date-time
                          example: 2024-07-16T21:31:26.335809566+05:00
                  pageable:
                    $ref: '#/components/schemas/Pageable'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
  /posts/{id}:
    get:
      summary: Get One Post By ID
      tags:
        - post
      parameters:
        - name: id
          in: path
          description: ID of post
          required: true
          schema:
            $ref: '#/components/schemas/UUIDQuery'
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - id
                      - text
                      - created_at
                      - updated_at
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: '09d0ce56-33ab-4fce-90bb-d2b4d6d844ba'
                      text:
                        type: string
                        format: text
                        example: Hello World!
                      created_at:
                        type: string
                        format: date-time
                        example: 2024-07-16T21:31:26.335809566+05:00
                      updated_at:
                        type: string
                        format: date-time
                        example: 2024-07-16T21:31:26.335809566+05:00
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
        '410':
          description: Deleted
    patch:
      summary: Update One Post By ID
      tags:
        - post
      parameters:
        - name: id
          in: path
          description: ID of post
          required: true
          schema:
            $ref: '#/components/schemas/UUIDQuery'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  format: text
                  example: Hello World!
      responses:
        '202':
          description: Successful
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete One Post By ID
      tags:
        - post
      parameters:
        - name: id
          in: path
          description: ID of post
          required: true
          schema:
            $ref: '#/components/schemas/UUIDQuery'
      responses:
        '202':
          description: Successful
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Restore One Post By ID
      tags:
        - post
      parameters:
        - name: id
          in: path
          description: ID of post
          required: true
          schema:
            $ref: '#/components/schemas/UUIDQuery'
      responses:
        '202':
          description: Successful
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - message
          properties:
            message:
              type: string
              format: text
              example: Any Message
    Pageable:
      type: object
      required:
        - pageable
      properties:
        pageable:
          type: object
          required:
            - total
            - total_pages
            - next
            - page
            - prev
            - limit
          properties:
            total:
              type: integer
              format: int64
              example: 1
            total_pages:
              type: integer
              format: int64
              example: 1
            next:
              type: integer
              format: int64
              example: 1
            page:
              type: integer
              format: int64
              example: 1
            prev:
              type: integer
              format: int64
              example: 1
            limit:
              type: integer
              format: int64
              example: 25
    UUIDQuery:
      type: string
      format: uuid
      example: '09d0ce56-33ab-4fce-90bb-d2b4d6d844ba'
    Bech32Query:
      type: string
      format: bech32
      example: 'bc1qfpmv7y2vr6tk50vxlyhtp6phz0ztrqmsanwa6t'
    PageQuery:
      type: integer
      format: int64
      example: 1
    LimitQuery:
      type: integer
      format: int64
      example: 25
    SortQuery:
      type: string
      format: sort
      example: desc
      enum:
        - asc
        - desc
    